# Generated by Django 4.0.6 on 2022-12-05 01:46

import app01.models
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('userSignature', models.CharField(blank=True, default='这个人很懒，什么也没留下~', max_length=45, verbose_name='用户个性签名')),
                ('userNumber', models.CharField(max_length=15, unique=True, verbose_name='用户学工号')),
                ('userSex', models.IntegerField(choices=[(0, '女性'), (1, '男性')], default=1, null=True, verbose_name='用户性别')),
                ('userGrade', models.CharField(blank=True, max_length=25, verbose_name='用户年级')),
                ('userPortrait', models.ImageField(default='default.jpg', max_length=25, null=True, upload_to=app01.models.user_directory_path, verbose_name='用户头像')),
                ('userPrefer', models.CharField(blank=True, default='', max_length=25, verbose_name='用户的口味偏好')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'db_table': 'backend_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('activityId', models.AutoField(primary_key=True, serialize=False)),
                ('activityName', models.CharField(max_length=30, verbose_name='活动名称')),
                ('activityBrief', models.CharField(max_length=30, verbose_name='活动简介')),
                ('activityContent', models.FileField(upload_to=app01.models.user_directory_path, verbose_name='活动详情')),
                ('activityHeadPhoto', models.ImageField(default='default.jpg', null=True, upload_to=app01.models.user_directory_path, verbose_name='活动头图')),
                ('activityBegin', models.DateTimeField(verbose_name='活动开始时间')),
                ('activityEnd', models.DateTimeField(verbose_name='活动结束时间')),
                ('activityPersonCnt', models.IntegerField(default=0, verbose_name='活动参与人数')),
            ],
            options={
                'db_table': 'backend_activity',
            },
        ),
        migrations.CreateModel(
            name='Blog',
            fields=[
                ('blogId', models.AutoField(primary_key=True, serialize=False)),
                ('blogPrivate', models.BooleanField(choices=[(True, '是'), (False, '否')], null=True, verbose_name='是否公开')),
                ('blogTitle', models.CharField(max_length=45, verbose_name='帖子标题')),
                ('blogContent', models.FileField(upload_to='blogs/contents', verbose_name='帖子内容存储路径')),
                ('blogDeliverTime', models.DateTimeField(verbose_name='帖子发布时间')),
                ('blogFavoriterCnt', models.IntegerField(default=0, null=True, verbose_name='帖子的收藏人数')),
                ('blogLikeCnt', models.IntegerField(default=0, null=True, verbose_name='帖子的喜欢人数')),
                ('blogsActivitys', models.ManyToManyField(to='app01.activity')),
            ],
            options={
                'db_table': 'backend_blog',
            },
        ),
        migrations.CreateModel(
            name='Canteen',
            fields=[
                ('canteenId', models.AutoField(primary_key=True, serialize=False)),
                ('canteenName', models.CharField(max_length=30, unique=True, verbose_name='食堂名称')),
                ('canteenAddr', models.CharField(max_length=50, unique=True, verbose_name='食堂地址')),
                ('canteenPhone', models.CharField(max_length=11, unique=True, verbose_name='食堂电话')),
            ],
            options={
                'db_table': 'backend_canteen',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('commentId', models.AutoField(primary_key=True, serialize=False)),
                ('commentContent', models.CharField(max_length=300, verbose_name='评论内容')),
                ('commentDeliverTime', models.DateTimeField(verbose_name='发布时间')),
            ],
            options={
                'db_table': 'backend_comment',
            },
        ),
        migrations.CreateModel(
            name='Merchant',
            fields=[
                ('merchantId', models.AutoField(primary_key=True, serialize=False)),
                ('merchantName', models.CharField(max_length=30, unique=True, verbose_name='窗口名')),
                ('merchantPassword', models.CharField(max_length=25, verbose_name='窗口登录密码')),
                ('merchantPortrait', models.ImageField(default='default.jpg', max_length=25, null=True, upload_to=app01.models.user_directory_path, verbose_name='窗口头像')),
                ('merchantPhone', models.CharField(max_length=11, unique=True, verbose_name='窗口电话')),
                ('merchantStars', models.FloatField(verbose_name='商家评分')),
                ('merchantAddr', models.CharField(max_length=50, unique=True, verbose_name='窗口地址')),
                ('merchantOpen', models.TimeField(verbose_name='窗口营业起始时间')),
                ('merchantClose', models.TimeField(verbose_name='窗口营业结束时间')),
                ('merchantFollowerCnt', models.IntegerField(verbose_name='收藏人数')),
                ('merchantActivityId', models.ManyToManyField(to='app01.activity')),
                ('merchantHead', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mh', to='app01.canteen', verbose_name='窗口所属食堂')),
            ],
            options={
                'db_table': 'backend_merchant',
            },
        ),
        migrations.CreateModel(
            name='Dish',
            fields=[
                ('dishId', models.AutoField(primary_key=True, serialize=False)),
                ('dishName', models.CharField(max_length=30, verbose_name='菜品名')),
                ('dishPrice', models.FloatField(verbose_name='菜品价格')),
                ('dishPicture', models.ImageField(default='default.jpg', max_length=25, null=True, upload_to=app01.models.user_directory_path, verbose_name='菜品头像')),
                ('dishStars', models.FloatField(verbose_name='菜品评分')),
                ('dishRaw', models.CharField(default='暂未提供原料信息', max_length=50, null=True, verbose_name='菜品原料')),
                ('dishTaste', models.CharField(default='暂未提供口味信息', max_length=30, null=True, verbose_name='菜品口味')),
                ('dishBrief', models.TextField(default='暂未提供菜品简介', max_length=300, null=True, verbose_name='菜品简介')),
                ('dishFollowerCnt', models.IntegerField(verbose_name='收藏人数')),
                ('dishAvailable', models.BooleanField(choices=[(True, '是'), (False, '否')], null=True, verbose_name='当日售罄')),
                ('dishSeller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ds', to='app01.merchant', verbose_name='销售窗口')),
            ],
            options={
                'db_table': 'backend_dish',
            },
        ),
        migrations.CreateModel(
            name='BlogPicture',
            fields=[
                ('blogPictureId', models.AutoField(primary_key=True, serialize=False)),
                ('blogPicture', models.ImageField(default='default.jpg', max_length=25, null=True, upload_to='blogs/imgs', verbose_name='帖子照片')),
                ('blogId', models.ManyToManyField(to='app01.blog')),
            ],
            options={
                'db_table': 'backend_blog_picture',
            },
        ),
        migrations.CreateModel(
            name='BlogLabel',
            fields=[
                ('blogLabelId', models.AutoField(primary_key=True, serialize=False)),
                ('blogLabelContent', models.CharField(max_length=30, unique=True, verbose_name='标签名称')),
                ('blogId', models.ManyToManyField(to='app01.blog')),
            ],
            options={
                'db_table': 'backend_blog_Label',
            },
        ),
        migrations.AddField(
            model_name='blog',
            name='blogsDishes',
            field=models.ManyToManyField(to='app01.dish'),
        ),
        migrations.AddField(
            model_name='blog',
            name='blogsFavoritedUserIds',
            field=models.ManyToManyField(to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='userActivityId',
            field=models.ManyToManyField(to='app01.activity'),
        ),
        migrations.AddField(
            model_name='user',
            name='userFavoriteDishId',
            field=models.ManyToManyField(to='app01.dish'),
        ),
        migrations.AddField(
            model_name='user',
            name='userFavoriteMerchantId',
            field=models.ManyToManyField(to='app01.merchant'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='UserDeliverOrReceivedComments',
            fields=[
                ('commentId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='uc_ci', serialize=False, to='app01.comment', verbose_name='帖子id')),
                ('commentSort', models.IntegerField(choices=[(0, '发布'), (1, '收到')], verbose_name='评论性质')),
                ('userId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='uc_ui', to=settings.AUTH_USER_MODEL, verbose_name='用户id')),
            ],
        ),
        migrations.CreateModel(
            name='UserDeliverBlog',
            fields=[
                ('blogId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='ubi', serialize=False, to='app01.blog', verbose_name='帖子id')),
                ('userId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ub_ui', to=settings.AUTH_USER_MODEL, verbose_name='发布者id')),
            ],
            options={
                'db_table': 'backend_UserDeliverBlog',
            },
        ),
        migrations.CreateModel(
            name='MerchantDeliverOrReceivedComments',
            fields=[
                ('commentId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='mc_ci', serialize=False, to='app01.comment', verbose_name='帖子id')),
                ('commentSort', models.IntegerField(choices=[(0, '发布'), (1, '收到')], verbose_name='评论性质')),
                ('merchantId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mc_mi', to='app01.merchant', verbose_name='窗口id')),
            ],
        ),
        migrations.CreateModel(
            name='MerchantDeliverBlog',
            fields=[
                ('blogId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='mbi', serialize=False, to='app01.blog', verbose_name='帖子id')),
                ('merchantId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mb_mi', to='app01.merchant', verbose_name='发布者id')),
            ],
            options={
                'db_table': 'backend_MerchantDeliverBlog',
            },
        ),
        migrations.CreateModel(
            name='CommentReplyComment',
            fields=[
                ('replyCommentId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='crc_rci', serialize=False, to='app01.comment', verbose_name='回评id')),
                ('commentId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='crc_ci', to='app01.comment', verbose_name='评论id')),
            ],
        ),
        migrations.CreateModel(
            name='BlogUnderComments',
            fields=[
                ('commentId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='bc_ci', serialize=False, to='app01.comment', verbose_name='帖子id')),
                ('blogId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bc_bi', to='app01.blog', verbose_name='帖子id')),
            ],
        ),
    ]
